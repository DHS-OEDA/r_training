
<style>
body {
    overflow: scroll;
}
</style>


Lesson 2: Basic Statistics in R
========================================================
author: 
date: 
autosize: true

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE, echo=TRUE, fig.height = 10, fig.width = 10, fig.show = 'hold', fig.align = 'center')
library(tidyverse)
library(broom)
library(nycflights13)
library(sjmisc)
```

Objectives
======================================================

* Descriptive statistics
* Hypothesis testing
* Linear models

Descriptive Statistics
======================================================


```{r}
suppressWarnings(library(nycflights13))
data(flights)
mean(flights$dep_delay, na.rm=T) # removing NAs is a must!
max(flights$dep_delay, na.rm=T) 
summary(flights$dep_delay) # summary table of continuous variable
```

Frequency tables: sjmisc
======================================================

Using `library(sjmisc)` you can get a lot of the same types of descriptives more easily.

_Bonus: It is tidyverse compatible!_

```{r}
data(flights)
flights %>% group_by(carrier) %>% frq(origin)
```


Descriptive stats: sjmisc
=====================================================

```{r}
flights %>% descr()
```


Hypothesis testing
=====================================================
type:section


t.test
====================================================

```{r}
# simulated data
set.seed(1) # pseudorandom number seed
x <- rnorm(10)
y <- rnorm(10)
t.test(x, y)
```

Categorical data
====================================================

`chisq.test` and `kruskal.test` here


Linear models
=====================================================
type:section


lm example
====================================================
```{r}
data("mtcars")
# basic linear model using lm
fit <- lm(mpg~wt*hp, data=mtcars)
summary(fit)
```

Graphing your linear model
====================================================

```{r}
ggplot(data=fit, aes(x=mpg, y=wt*hp)) +
  geom_point() +
  geom_smooth(method='lm', se = FALSE)
```

glm: Generalized linear model
===================================================

```{r}
glmfit <- glm(am ~ wt, mtcars, family="binomial")
glmfit
```



broom: tidy up lm and t.test data
====================================================

The `tidyverse` package `broom` built to tidy up the base R outputs for `lm`, `glm` and `t.test` to conform to tidy data principles. 

Check out the vignette for more details here <https://cran.r-project.org/web/packages/broom/vignettes/broom.html>

```{r broom}
fit <- lm(mpg~wt*hp, data=mtcars)
mydat <- broom::augment(fit)
head(mydat)
```

broom: tidy up lm and t.test data
====================================================

There are a couple of other `broom` functions worth noting. These are especially handy for transforming these models into table-friendly versions for publication. 

1. `tidy()` takes the output of a model and makes it a tidy data frame of its own.
2. `glance()` returns only the goodness-of-fit calculations of the model. These calculations are specific to the type of model. 

```{r}
head(tidy(fit))
glance(fit)
glance(glmfit)
```

