
<style>
body {
    overflow: scroll;
}
</style>

R Crash Course: Lesson 1
========================================================
author: Aaron C Cochran
date: `r format(Sys.Date(), "%B %d, %Y")`
autosize: false
height: 1080
width: 1920

```{r setup, include=FALSE}
opts_chunk$set(cache=TRUE, echo=TRUE, fig.height = 10, fig.width = 10, fig.show = 'hold', fig.align = 'center')
library(tidyverse)
library(nycflights13)
library(gapminder)
library(microbenchmark)
library(Lahman)
library(shiny)
mpg <- ggplot2::mpg
diamonds <- ggplot2::diamonds
```


Introduction
========================================================

We're going to pick this course up with the asssumption that you've already installed R and RStudio. If you need help doing that on your own work station, follow these links. 

- The R Project for Statistical Computing <https://cloud.r-project.org/>
- RStudio Integrated Development Environment (IDE) <https://www.rstudio.com/products/rstudio/download/>

Note that:
- R does not require admin access. You can install it directly to your Documents folder.
- RStudio **DOES** require admin access to install.
- RTools is optional, but allows you to use packages that need to be compiled before use. 

========================================================
type:subsection
We're going to primarily use the book **R for Data Science** by Hadley Wickham and Garret Grolemund. 

<http://r4ds.had.co.nx/index.html> 
***
![r4ds cover](img/r4ds_cover.png)


The very basics
========================================================


![workflow](img/data-science_workflow.png)
***

- **Import** data into R
- **Tidy** the data for analysis
- **Transform** the data, **visualize** it, and use it to construct your **model**
- **Communicate** your results

Working Directory
========================================================

Best practice: Create a new project folder for each project to isolate your code and data

*File >> New Project...*

```{r, echo=TRUE, eval = TRUE}
getwd()
```

Working Directory
========================================================

Within your working directory, you can organize things how you like. 

Every project I have in R has the following folders in the working directory:

- data _This contains any datasets in their unaltered form_

Beyond that, include what you like. Sometimes, I include documentation in a _docs_ folder, or images in a _img_ folder.

>> If you consistently name your folders in your projects it keeps things sorted in your head. Data goes in data folder. Images go in img folder.

```{r, echo=TRUE, eval=FALSE}
read_csv('data/mycsv.csv') # this is shorter and portable. It uses relative file paths.

read_csv('C:/Users/User/Documents/R/myproject/data/mycsv.csv') # this is bad. Not portable, and long. 

```



Packages
========================================================

R's base code is somewhat limited. The original language is from the mid-90's to early 2000's. You extend this functionality through packages. The main package here is `tidyverse` which is actually a collection of a number of packages and their dependencies that share a common philosophy. 

```{r, eval=FALSE, echo=TRUE}
install.packages("tidyverse")
```

You can also do it through the RStudio GUI under **Tools >> Install Packages**

![rstudio-packages](img/rstudio-install-package-1.png)

Packages: The Tidyverse
========================================================

![tidyverse](img/tidyverse-components.jpg)


Packages
=========================================================

Package help file
```{r, eval=TRUE, echo=TRUE}
help(package="ggplot2")
```

Help with a function
```{r}
# if you know the function and have the package loaded
?geom_point()
# if you can't find the function do this
??geom_point()

```


Other packages
========================================================

Beyond the so-called `tidyverse` we'll be using a few other packages. You can install those through the same command as well. 

```{r, echo=TRUE, eval=FALSE}
install.packages(c("nycflights13", "gapminder", "Lahman"))
```

Running R code
========================================================

There are a few conventions we'll use in this course. 

- Functions are in a code font and followed by parentheses, like `sum()` or `mean()`. 
- Other R objects (like data or function arguments) are in a code font, without parentheses, like `flights` or `x`. 
- If we want to be explicitly clear on what package we're using, we'll use the package name followed by two colons, like `dplyr::mutate()` or `nycflights13::flights`. 

The last point is considered a best-practice when you are writing code to share, as it avoids ambiguity in naming. Often, packages might have functions that share the same name, and the last package you load will overwrite the other functions. Explicit naming avoids this overwriting. 


Basics of R
=======================================================
type:section

R Console
=======================================================
 
 The console is where you enter commands
 
```{r, echo=TRUE, eval=TRUE}
1+1

print('Hello World')

Sys.time()
```
 
Objects, Classes, and Methods
======================================================

R is an _*object-oriented*_ programming language. You give it commands to do things ( _functions_ ) to objects.

R's math operations are _vectorized_. A _vector_ is one class of object in R. Vectors are homogenous (only one type of "thing" in them).


```{r}
# a vector of numbers
c(1,2,3,4,5)
# a vector of strings
c("This","is","a","vector","of","strings")
# this is a vector of booleans (and a missing value)
c(T,F,T,NA)
```

Objects (continued)
======================================================

A matrix is a n x m dimensional vector. It is also homogenous. 

```{r}
matrix(seq(1:9), nrow=3, ncol=3)

```

======================================================

You can select parts of a vector or matrix. 

```{r}
m <- matrix(seq(1:9), nrow=3, ncol=3) # <- is the assignment operator

m[2, ] # select the 2nd row

m[ , 1] # select the first column

m[2,3] # select element in row 2, column 3
```

Data frames & Lists
=======================================================

Heterogenous data structures

```{r}
a <- data.frame(
  "Col1"= seq(1:5),
  "Col2" = letters[c(1,2,3,4,5)],
  "Col3" = c(T,T,F,T,F)
)
a
```

=======================================================

Lists can even contain other data frames

```{r}
l <- list(x=1:5, y=c('a', 'b'), z=a)
l['x'] # select the x element of the list (by name)

l[[2]] # select the 2nd element of the list

l # see the whole list
```

Tidyverse: tibbles
======================================================


Tibbles are a modern take on data.frames. If you use `tidyverse` and the accompanying `tibble` package from the start you'll never notice the changes, but they make life easier. 

* Displays data in a more friendly format
* They drop features that are no longer useful (`stringsAsFactors = FALSE`, I'm looking at you)
* Tibbles are faster to work with

```{r, echo=TRUE, eval=TRUE}
if (requireNamespace("microbenchmark")) {
  l <- replicate(26, sample(100), simplify = FALSE)
  names(l) <- letters

  microbenchmark::microbenchmark(
    as_tibble(l),
    as.data.frame(l)
  )
}
```


Reading & manipulating data
======================================================
type:section

Using `readr` and `dplyr` from the `tidyverse` series of packages

![readr](img/readr.png)
![dplyr](img/dplyr.png)


=====================================================

Read in data from a .csv using `read_csv`. 

```{r}
train <- read_csv('data/titanic/train.csv') # note the relative file path
head(train)
```

=======================================================

You can also do this through RStudio's GUI

![read-rstudio](img/rstudio-read.png)


Data manipulation with `dplyr`
=======================================================

`dplyr` does a lot of things base R does, but faster, and with less code

`dplyr` uses "verbs":

* `arrange`: orders rows based on logic provided
* `mutate`: creates new variables from existing ones
* `filter`: returns a subset of the data.frame as a new table
  + be sure to read `?base::Logic` and `?Comparison` for logical operators
* `select`: like filter, but for columns. Returns selected columns as a new table
* `summarise`: applies summary functions to columns and returns a new table
* `group_by`: creates a "grouped" version of the table and will do `dplyr` functions to each group individually

> Note: US English spelling or UK English spelling is fine


`tidyr`
=======================================================

In addition to `dplyr` there is `tidyr` which has more functions for manipulating data. It is also part of the `tidyverse` but worth mentioning in its own slide. 

* `spread`: makes long (tidy) data wide
* `gather`: makes wide data long


Principles of tidy data
========================================================

> "Happy families are all alike; every unhappy family is unhappy in its own way" - Leo Tolstoy

Like Tolstoy's families, all tidy data is alike, but all untidy data is uniquely untidy.

1. Each variable forms a column
2. Each observation forms a row
3. Each type of observational unit forms a table


![tidy-1](img/tidy-1.png)

> See <https://www.jstatsoft.org/article/view/v059i10/v59i10.pdf> by Hadley Wickham (2014) for more details


=======================================================

Our data

```{r}
# let's create fake stock price data
set.seed(1) # pseudorandom numbers
stocks <- data.frame(
   time = as.Date('2009-01-01') + 0:9,
   X = rnorm(10, 20, 1),
   Y = rnorm(10, 20, 2),
   Z = rnorm(10, 20, 4)
 )
stocks 
```

We have 3 stocks: X, Y, Z. We have a time column with the times of the prices, and we have prices for each stock. 

=======================================================

1. Each variable forms a column

Problem: Stock X, Y, and Z are variables as columns. 

```{r}
stocks_tidy <- # we're saving our data as a new data.frame 
  gather(data=stocks, key= stock, value = price, X, Y, Z) # gathering the X, Y, and Z columns
head(stocks_tidy,12)
```

======================================================

Why does it matter if the data is tidy?

* vectorized math
* unified syntax between packages
* much faster for big data

`dplyr` pipeline: putting it together
======================================================

` %>% ` is the pipeline operator. It says "take the object on the left, and do the function on the right to it"

Synonymous to `f(x,y)` but makes for much easier to read code. For example, let's say we wanted to know the high and low value of each stock.

```{r}
stocks %>% # raw data
  gather(stock, price, X:Z) %>% # made tidy
  group_by(stock) %>% # grouped by stock
  summarise(min = min(price), max=max(price)) # summary stats returned
```

Another `dplyr` example
=======================================================

Taken from <https://www.r-bloggers.com/introducing-tidyr/>

```{r}
# make a dataset of messy data
set.seed(10)
messy <- data.frame(
  id = 1:4,
  trt = sample(rep(c('control', 'treatment'), each = 2)),
  work.T1 = runif(4), # ?runif if you want to know more
  home.T1 = runif(4), # but simply put it creates random deviates
  work.T2 = runif(4), # of a uniform distribution
  home.T2 = runif(4)
)
messy
```

=======================================================

First lets gather up our columns into a key-value pair (called `key` and `time` here)

```{r}
tidier <- messy %>% # take our original messy data
  gather(key, time, -id, -trt) # you can specify which columns to exclude by using the negative sign
tidier %>% head(8) # head() takes an argument to specify how many rows to show
```

========================================================

Now let's split up that key into a location and time variable using regular expressions

> Regular expressions are a bear to learn, but very worth it in the end. One good tutorial is here <https://regexone.com/>

```{r}
tidy <- tidier %>% 
  separate(key, into = c("location", "time"), sep = "\\.")
tidy %>% head(8)
```

dates and times in R
=======================================================

R stores dates and date-times.

`lubridate` from the `tidyverse` packages makes this much easier

```{r}
library(lubridate)
today()
now()
```

string dates
=======================================================

Date/time often exists as strings in administrative databases. 

```{r}
# using lubridate
ymd("2017-01-01")
mdy("January 31st, 2017")
dmy("31-Jan-2017")
```

dates and times
=========================================================

Using `nycflights13` flight data

```{r}
data(flights)

flights %>% select(year, month, day, hour, minute)
```

dates and times
========================================================

```{r}
flights %>% 
  select(year, month, day, hour, minute) %>% 
  mutate(departure = make_datetime(year, month, day, hour, minute))
```

dates and times
=======================================================

Recall that the four time columns in `flights` were not date-time <`dttm`> variables.

```{r}
flights %>% 
  select(year, month, day, hour, minute, dep_delay, arr_delay, dep_time, arr_time) %>% 
  head()
```

dates and times
======================================================

We need to use modulus arithmetic to pull out hours and minutes from the time variables. This is a bit more advanced, so let's walk through it slowly.

```{r}
# create a function -- for more information read the Functions chapter (19) in the text

make_datetime_100 <- function(year, month, day, time) {
  make_datetime(year, month, day, time %/% 100, time %% 100) # time %/% 100 extracts the hour, time %% 100 extracts the minute
}


flights_dt <- flights %>% 
  filter(!is.na(dep_time), !is.na(arr_time)) %>% 
  mutate(
    dep_time = make_datetime_100(year, month, day, dep_time),
    arr_time = make_datetime_100(year, month, day, arr_time),
    sched_dep_time = make_datetime_100(year, month, day, sched_dep_time),
    sched_arr_time = make_datetime_100(year, month, day, sched_arr_time)) %>% 
  select(origin, dest, ends_with("delay"), ends_with("time"))

flights_dt

```

why bother?
====================================================

```{r}
# do math with dttm

df <- flights_dt[1:10,]

df$travel_time <- df$arr_time - df$dep_time

df$travel_time
```

why bother?
=====================================================

ggplot knows how to work with dates and times

```{r}
flights_dt %>% 
  filter(dep_time < ymd(20130102)) %>% 
  ggplot(aes(dep_time)) + 
  geom_freqpoly(binwidth = 600, , size=1) # 600 s = 10 minutes
```




Data exploration: Visualization
=======================================================
type:section

![data science explore](img/data-science-explore.png)

> “The simple graph has brought more information to the data analyst’s mind than any other device.” — John Tukey

Getting started
======================================================

```{r, eval=FALSE, echo=TRUE}
install.packages("tidyverse") # assuming you don't already have it installed
library(tidyverse) # load the package

```

Mpg data
======================================================

We're going to use the `mpg` data frame found in ggplot2 (aka `ggplot2::mpg`). `mpg` contains observations collected by the EPA on 38 car models. 

======================================================
```{r}
ggplot2::mpg
```

======================================================

Among the variables in this set are:

1. `displ`, a car's engine size in liters
2. `hwy`, a car's fuel efficiency in miles per gallon. 

Plotting with ggplot2
======================================================

Let's look at `displ` on the x-axis and `hwy` on the y-axis

```{r}
mpg <- ggplot2::mpg # assign the dataset to a variable. 

ggplot(data=mpg) +
  geom_point(mapping = aes(x=displ, y=hwy), size = 2) +
  # all of the text below is just tweaking it for readability
  # this happens automatically in RStudio but is needed for 
  # presentations
  theme_minimal() +
  theme(axis.text.x=element_text(size = 14), 
        axis.text.y=element_text(size = 14), 
        axis.title.x=element_text(size = 16),
        axis.title.y=element_text(size = 16))
```


ggplot2 template
======================================================

We can use the code we just graphed as a template for all of our work in ggplot2. It goes something like this:

```{r, eval=FALSE}
ggplot(data=<DATA>) +
  <GEOM_FUNCTION>(mapping = aes(<MAPPINGS>))
```

`<MAPPINGS>` are going to be our first component to focus on. 

Aesthetic mappings
=======================================================

> “The greatest value of a picture is when it forces us to notice what we never expected to see.” — John Tukey

The map we just looked at showed there was a relationship between engine size and fuel efficiency. But it didn't account for the class of the car, so SUVs looked the same as subcompact cars. Let's add another variable to our graph. We'll use color to denote the class of the car. 

=======================================================

```{r, eval=TRUE, echo=TRUE}
ggplot(data=mpg) +
  geom_point(mapping = aes(x=displ, y=hwy, color = class), size = 2) +
    theme_minimal() +
  theme(axis.text.x=element_text(size = 14), 
        axis.text.y=element_text(size = 14), 
        axis.title.x=element_text(size = 16),
        axis.title.y=element_text(size = 16))
```

Facets
=======================================================

So, we've seen that the class of car influences where they are on the `displ` vs `mpg` graph. How do the cars distribute within each of their respective classes?

This is where one of the powerful features of `ggplot` comes into play: Faceting. 


=======================================================

Breaking up the graph by vehicle `class`

```{r}
ggplot(data=mpg) +
  geom_point(mapping = aes(x=displ, y=hwy), size=2) +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14)) +
  facet_wrap(~class, nrow = 2)
```


=======================================================

Faceting using two variables: `drv`, the drivetrain of the vehicle, and `cyl`, the number of cylinders in the engine.

```{r}
ggplot(data=mpg) +
  geom_point(mapping = aes(x=displ, y=hwy), size=2) +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14)) +
  facet_grid(drv ~ cyl)
```

Geometric objects (geoms)
=======================================================

Now let's look at `geom` instead of `aes`. Geoms are geometric objects, which tell ggplot2 what kind of graph to make. We've used `geom_point()` to make a scatter plot. 

But we could display the same data differently...

Different geoms
=======================================================


```{r, echo = FALSE, eval=TRUE, fig.height=7, fig.width=7, fig.align='left'}
# left
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size = 2) +
  ggtitle('geom_point()')

```

***

```{r echo = FALSE, eval=TRUE, fig.height=7, fig.width=7, fig.align='left'}
# right
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy)) +
  ggtitle('geom_smooth()')
```



======================================================

```{r, echo = TRUE, eval=FALSE}
# left
ggplot(data = mpg) + 
  geom_point(mapping = aes(x = displ, y = hwy), size=2)

# right
ggplot(data = mpg) + 
  geom_smooth(mapping = aes(x = displ, y = hwy))

```
 
 
======================================================

We can even combine these two different **geoms** into a single plot. `ggplot` is built on the idea that you can layer information into a single graph. 

```{r}
ggplot(data=mpg) +
  geom_point(mapping = aes(x=displ, y=hwy), size=2) +
  geom_smooth(mapping = aes(x=displ, y= hwy)) +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```

======================================================

The previous plot introduced duplications in our code. We had to specify the aesthetic mappings for each geom, which could lead to typos. When you put mappings inside of the geom, it applies them to *that layer only*. To fix that, you can do this:

```{r}
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) + # aes() is in the global environment
  geom_point(size=2) +
  geom_smooth() +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```

======================================================
> "Too often diagrams rely solely on one type of data or stay at one level of analysis." - Edward Tufte

Then, you can apply layer-specific aesthetics to the layer you want:

```{r}
ggplot(data=mpg, mapping = aes(x=displ, y=hwy)) + # aes(x, y) are global (inherited by all geoms)
  geom_point(mapping = aes(color = class), size=2) + # aes(color) is only part of geom_point here
  geom_smooth(data=filter(mpg, class == "subcompact"), se = FALSE)
```

geom_bar
=======================================================
type:section

This section looks at ggplot's `geom_bar()` geom and related aesthetics.

=======================================================

We're going to use a new dataset. `diamonds` is a dataset in `ggplot2` that contains info on ~54,000 diamonds, including `price`, `carat`, `color`, `clarity` and `cut`. 

```{r}
diamonds
```

=======================================================

```{r}
ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut)) +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```


=======================================================

Bar charts introduce a new aesthetic: `fill`. You can still use `color` but that only affects the outline. `fill` will change the interior of the bar. 

```{r}
ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut, fill=clarity)) +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```

======================================================

We can use `position` to change how the data are displayed. `fill` creates a 100% area bar chart, useful for comparing proportions. 

```{r}
ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut, fill=clarity), position = "fill") +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```

======================================================

`dodge` places overlapping objects directly beside one another. 

```{r}
ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut, fill=clarity), position = "dodge") +
  theme(axis.text.x=element_text(size = 12), 
        axis.text.y=element_text(size = 12), 
        axis.title.x=element_text(size = 14),
        axis.title.y=element_text(size = 14))
```

ggthemes
=====================================================

Creating your own theme is time consuming up-front. `ggthemes` can help. 

```{r, echo=TRUE, eval=TRUE}
library(ggthemes)
ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut, fill=clarity), position = "dodge") +
  theme_minimal()
```

ggThemeAssist
=====================================================

A `shiny` based application for those who like GUIs. 

```{r, echo=TRUE, eval=FALSE}
library(ggThemeAssist)

p <- ggplot(data=diamonds) +
  geom_bar(mapping = aes(x=cut, fill=clarity), position = "dodge")

ggThemeAssist::ggThemeAssistGadget(p)

```


For more information
======================================================

Tutorials:

Nice but dated (2012) tutorial on ggplot2
<http://www.ling.upenn.edu/~joseff/avml2012/>

Another nice ggplot2 tutorial
<http://tutorials.iq.harvard.edu/R/Rgraphics/Rgraphics.html>

DataCamp courses are free to start, but cost money to access later chapters. 
<https://www.datacamp.com/courses/data-visualization-with-ggplot2-1>


Where to get help?
=====================================================

Asking questions:

[StackOverflow](https://stackoverflow.com/questions/tagged/r)
[ggplot2 Google Group](https://groups.google.com/forum/#!forum/ggplot2)

Or, you know... me. (Email: aaron.c.cochran@state.or.us, Phone: 503-945-6867)

Social Media:
[RStudio Tips Twitter](https://twitter.com/rstudiotips)
[Rbloggers Twitter](https://twitter.com/rbloggers?lang=en)
[RTips Twitter](https://twitter.com/R_Programming)

For fun:
[RCatLadies Twitter](https://twitter.com/rcatladies?lang=en)

Lab 1
======================================================
type:section

Time for some exercises. 

Labs are available at  <https://github.com/DHS-OEDA/r_training/>


